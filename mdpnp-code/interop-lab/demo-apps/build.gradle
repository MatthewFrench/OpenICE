/*******************************************************************************
 * Copyright (c) 2014, MD PnP Program
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************/
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'launch4j'

defaultTasks 'build'

launch4j {
    mainClassName = "org.mdpnp.apps.testapp.Main"
    icon = "$projectDir/src/main/resources/org/mdpnp/apps/testapp/icon.ico"
    launch4jCmd = "$buildDir/launch4j-install/launch4j/launch4j"
    customProcName = true
    maxHeapSize = 128
    opt = '-Dsun.java2d.noddraw=true'
}

buildscript {
    dependencies {
        classpath 'edu.sc.seis:gradle-launch4j:1.0.5'
    }
}

def launch4jPath = 'http://downloads.sourceforge.net/project/launch4j/launch4j-3/3.1.0-beta1/'
def launch4jName = ''
switch(localOsName) {
    case WINDOWS:
    launch4jName = 'launch4j-3.1.0-beta1-win32.zip'
    break
    case MAC:
    launch4jName = 'launch4j-3.1.0-beta1-macosx-x86-10.8.tgz'
    break
    case LINUX:
    launch4jName = 'launch4j-3.1.0-beta1-linux.zip'
    break
}

// Create a directory for launch4j and appbundler to be stored semi-permanently
// so we don't re-download after every clean
task createBuildToolsDir << {
    file("build-tools/").mkdir()
}

// Brings together dependencies for the benefit of the appbuilder
task copyDeps(type: Copy, dependsOn: build) {
    from configurations.runtime
    from jar.archivePath
    into "${buildDir}/deps"
}

// http://stackoverflow.com/questions/14474973/how-to-download-a-file-groovy
def redirectFollowingDownload( String url, File f ) {
    while( url ) {
      new URL( url ).openConnection().with { conn ->
        conn.instanceFollowRedirects = false
        url = conn.getHeaderField( "Location" )
        if( !url ) {
          f.withOutputStream { out ->
            conn.inputStream.with { inp ->
              out << inp
              inp.close()
            }
          }
        }
      }
    }
  }



task downloadAppBundler(dependsOn: createBuildToolsDir) << {
    File f = file("build-tools/appbundler-1.0.jar");
    if(!f.exists() || f.length() == 0) {
        println 'Downloading appbundler-1.0.jar'
        redirectFollowingDownload('http://java.net/downloads/appbundler/appbundler-1.0.jar', f)
    }
    buildscript.dependencies.create(files('build-tools/appbundler-1.0.jar'))
}

task createApp(dependsOn: [downloadAppBundler, copyDeps]) << {
    ant.taskdef(name: 'bundleapp', classname: 'com.oracle.appbundler.AppBundlerTask', classpath: file("build-tools/appbundler-1.0.jar"))
    ant.bundleapp(outputdirectory: "$buildDir/", name: "MDPnP Demo Apps", displayName: "MDPnP Demo Apps", identifier: "org.mdpnp.apps.testapp.Main", mainclassname: "org.mdpnp.apps.testapp.Main", icon: "$projectDir/src/main/resources/org/mdpnp/apps/testapp/icon.icns") {
        classpath(dir: "$buildDir/deps")
        // Can optionally bundle a JRE but it adds a LOT of size
        // runtime(dir: "$System.env.JAVA_HOME")
    }
    
    // appbundler does not enable retina displays even though newer Oracle JVMs can support it
    // so this adds the NSHighResolutionCapable key to the plist 
    def plist = file("$buildDir/MDPnP Demo Apps.app/Contents/Info.plist")
    def plist_hr = file("$buildDir/MDPnP Demo Apps.app/Contents/Info.plist.hr")
    plist_hr.withWriter { out ->
        plist.eachLine {
            // Continue if it is not the version line
            if (it.contains('</dict>')) {
                out.writeLine('<key>NSHighResolutionCapable</key>')
                out.writeLine('<true/>')
            }
            out.writeLine(it)
        }
    }
    plist.delete()
    plist_hr.renameTo(plist)
}
//createApp.outputs.dir("$buildDir/MDPnP Demo Apps.app")

if(localOsName == MAC) {
    task createSignedApp(type:Exec, dependsOn: createApp) {
        workingDir "$buildDir/"
        commandLine 'codesign', '--deep', '-f', '-s', 'Mac Developer: JEFFREY PLOURDE', 'MDPnP Demo Apps.app/'
    }
    task createSignedPkg(type:Exec, dependsOn: createSignedApp) {
        workingDir "$buildDir/"
        commandLine 'productbuild', '--component', 'MDPnP Demo Apps.app', '/Applications', '--sign', 'Developer ID Installer: JEFFREY PLOURDE', '--identifier', 'org.mdpnp.apps.testapp.Main', '--version', project.version, 'demo-apps-'+project.version+'.pkg'
    }

    task verifySignedApp(type:Exec, dependsOn: createSignedApp) {
        workingDir "$buildDir/"
        commandLine 'codesign', '-v', '-v', 'MDPnP Demo Apps.app'
    }

    task verifySignedPkg(type:Exec, dependsOn: createSignedPkg) {
        workingDir "$buildDir/"
        commandLine 'spctl', '--verbose', '--assess', '--type', 'install', 'demo-apps-'+project.version+'.pkg'
    }
}
task downloadLaunch4j(dependsOn: createBuildToolsDir) << {
    def f = file("build-tools/"+launch4jName)
    if(!f.exists()) {
        println 'Downloading ' + launch4jPath + launch4jName
        new URL(launch4jPath+launch4jName).withInputStream{ i -> f.withOutputStream{ it << i }}
    }
}

task explodeLaunch4j(dependsOn: downloadLaunch4j, type: Copy) {
    from launch4jName.endsWith("tgz") ? tarTree("build-tools/"+launch4jName) : zipTree("build-tools/"+launch4jName)
    into "$buildDir/launch4j-install/"
}

createExe.dependsOn(explodeLaunch4j)

sourceCompatibility = JAVA_VERSION_SOURCE
targetCompatibility = JAVA_VERSION_CLASSES

mainClassName = 'org.mdpnp.apps.testapp.Main'

def String BUILD_NUMBER = "$System.env.BUILD_NUMBER"

Date buildTimeAndDate = new Date()
ext {
    buildDate = new java.text.SimpleDateFormat('dd-MMM-yyyy').format(buildTimeAndDate)
    buildTime = new java.text.SimpleDateFormat('hh:mm aa').format(buildTimeAndDate)
}

manifest.mainAttributes("Main-Class" : "org.mdpnp.apps.testapp.Main")

def JOGL_version = '2.0.2'

dependencies {
    compile project(':interop-lab:demo-devices')
    compile project(':interop-lab:demo-guis')
    compile project(':interop-lab:demo-guis-swing')
    runtime project(':interop-lab:demo-purejavacomm')

    runtime group: 'org.slf4j', name: 'slf4j-log4j12', version: SLF4J_VERSION
    runtime group: 'log4j', name: 'log4j', version: '1.2.17'
    runtime group: 'org.mdpnp.apps.testapp.pca', name: 'mdpnp-sounds', version: '0.1.0'

    // Default capture device is a trimmed down piece of OpenIMAJ
    compile group: 'com.github.sarxos', name: 'webcam-capture', version: '0.3.9'
}

task createZip(type: Zip) {
    classifier = distZip.classifier
    from project.buildDir.getAbsolutePath()+File.separator+launch4j.outputDir
}
createZip.dependsOn(createExe)

jar {
    manifest {
        attributes("Main-Class": 'org.mdpnp.apps.testapp.Main', "Built-By": System.properties['user.name'], "Created-By": System.properties['java.version'] + " (" + System.properties['java.vendor'] + " " + System.getProperty("java.vm.version") + ")",
        "Implementation-Title": project.name, "Implementation-Version": project.version, "Build-Date": buildDate, "Build-Time": buildTime,
        "Specification-Title": project.name, "Specification-Version": project.version, "Implementation-Vendor": project.group,
        "Specification-Vendor": project.group, "Build-Number": BUILD_NUMBER)

    }
}
